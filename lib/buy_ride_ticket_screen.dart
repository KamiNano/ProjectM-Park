import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

class BuyRideTicketScreen extends StatefulWidget {
  @override
  _BuyRideTicketScreenState createState() => _BuyRideTicketScreenState();
}

class _BuyRideTicketScreenState extends State<BuyRideTicketScreen> {
  Map<String, int> rideTicketCounts = {
    "‡∏™‡∏Å‡∏≤‡∏¢‡πÇ‡∏Ñ‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå": 0,
    "‡∏ä‡∏¥‡∏á‡∏ä‡πâ‡∏≤‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå": 0,
    "‡∏°‡πâ‡∏≤‡∏´‡∏°‡∏∏‡∏ô": 0,
    "‡∏™‡∏ß‡∏ô‡∏ô‡πâ‡∏≥": 0
  };

  Map<String, int> rideTicketPrices = {
    "‡∏™‡∏Å‡∏≤‡∏¢‡πÇ‡∏Ñ‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå": 200,
    "‡∏ä‡∏¥‡∏á‡∏ä‡πâ‡∏≤‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå": 100,
    "‡∏°‡πâ‡∏≤‡∏´‡∏°‡∏∏‡∏ô": 100,
    "‡∏™‡∏ß‡∏ô‡∏ô‡πâ‡∏≥": 50
  };

  Future<void> sendRideTicketDataToServer(String rideName, int quantity) async {
    var url = Uri.parse("http://10.0.2.2/amusement_park/save_ride_ticket.php");

    try {
      var response = await http.post(
        url,
        headers: {"Content-Type": "application/json"},
        body: jsonEncode({"ride_name": rideName, "quantity": quantity}),
      );

      print("üîπ Response Body: ${response.body}");

      var responseData = jsonDecode(response.body);
      if (responseData["success"]) {
        print("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${responseData["message"]}");
      } else {
        print("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${responseData["message"]}");
      }
    } catch (e) {
      print("üö® Error: $e");
    }
  }

  void confirmPurchase() {
    setState(() {
      rideTicketCounts.forEach((ride, count) {
        if (count > 0) {
          sendRideTicketDataToServer(ride, count);
        }
      });

      // Reset count after purchase
      rideTicketCounts.updateAll((key, value) => 0);
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("‡∏ã‡∏∑‡πâ‡∏≠‡∏ï‡∏±‡πã‡∏ß‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏ô")),
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [Colors.blue.shade300, Colors.purple.shade300],
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
          ),
        ),
        child: Padding(
          padding: EdgeInsets.all(16),
          child: Column(
            children: [
              ...rideTicketCounts.keys.map((ride) => buildRideTicketOption(ride)),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: confirmPurchase,
                child: Text("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠"),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget buildRideTicketOption(String ride) {
    return Card(
      elevation: 4,
      margin: EdgeInsets.symmetric(vertical: 8),
      child: ListTile(
        title: Text("‡∏ï‡∏±‡πã‡∏ß $ride", style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold)),
        subtitle: Text("‡∏£‡∏≤‡∏Ñ‡∏≤ ${rideTicketPrices[ride]} ‡∏ö‡∏≤‡∏ó", style: TextStyle(fontSize: 16, color: Colors.green)),
        trailing: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            IconButton(
              icon: Icon(Icons.remove),
              onPressed: () {
                setState(() {
                  if (rideTicketCounts[ride]! > 0) {
                    rideTicketCounts[ride] = rideTicketCounts[ride]! - 1;
                  }
                });
              },
            ),
            Text(rideTicketCounts[ride].toString(), style: TextStyle(fontSize: 18)),
            IconButton(
              icon: Icon(Icons.add),
              onPressed: () {
                setState(() {
                  rideTicketCounts[ride] = rideTicketCounts[ride]! + 1;
                });
              },
            ),
          ],
        ),
      ),
    );
  }
}
